package main

import (
	"fmt"
	"log"
	"net/url"
	"regexp"
)

type Reactions map[int]string

var MessageHandlers = map[string]func(msg Message){
	`^/start$`: sayHello,
	`(?i)–ë—Ä–∞—Ç–∏—à–∫–∞.*–ø–æ–¥—Å–∫–∞–∂–∏ –∑–∞–º–µ–Ω—ã`: handleSubstitutionsRequest,
	`(?i)!–∑–∞–º–µ–Ω—ã`:           handleSubstitutionsRequest,
	`(?i)!–ø–∞—Ä—ã`:             handleLessonsSheduleRequest,
	`(?i)–ú–æ–ª–æ–¥–µ—Ü.*–±—Ä–∞—Ç–∏—à–∫–∞`: sayThankYou,
	`(?i)–°–ø–∞—Å–∏–±–æ.*–±—Ä–∞—Ç–∏—à–∫–∞`: sayPlease,
	`(?i)–ü—Ä–∏–≤–µ—Ç.*–±—Ä–∞—Ç–∏—à–∫–∞`:  sayHello,
	`(?i)–ë—Ä–∞—Ç–∏—à–∫–∞.*–ø—Ä–∏–≤–µ—Ç`:  sayHello,
	`(?i)–ë—Ä–∞—Ç–∏—à–∫–∞.*—Å–ø–∏—à—å?`:  sayNoSleep,
	`(?i)–ë—Ä–∞—Ç–∏—à–∫–∞.*—Å–æ–æ–±—â–∏ –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–∞–º–µ–Ω—ã`: watchUpdates,
	`(?i)–ë—Ä–∞—Ç–∏—à–∫–∞.*ID`:     sayChatID,
	`(?i)–ü–ª–æ—Ö–æ–π.*–±—Ä–∞—Ç–∏—à–∫–∞`: sayWasOffensively,
	`(?i)–ß—Ç–æ –≤—ã\?`:         sayThinking,
	`(?i)–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏`:   sayGoodNight,
	`(?i)–°–ø–∏—Ç–µ\?`:          saySleeping,
	`(?i)!—á–∞—Ç`:             sendChatInfo,
	`(?i)–°–ø–∞—Å–∏–±–æ`:          replyToThanks,
}

var messageReactions = map[int]Reactions{}

var reactionEmoji = map[string]string{
	"reaction1": "üòç",
	"reaction2": "ü§î",
	"reaction3": "üí©",
}

func sayHello(msg Message) {
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %v üôÇ", msg.From.FirstName)
	SendMessage(text, msg.Chat.ID)
}

func handleSubstitutionsRequest(msg Message) {
	SendSubstitutions(msg.Chat.ID)
}

func makeReactionsKeyboard(reactionsCounter map[string]int) string {
	buttons := map[string]string{}
	for r, c := range reactionsCounter {
		if c > 0 {
			buttons[r] = fmt.Sprintf(`{"text": "%v %v", "callback_data": "%v"}`, reactionEmoji[r], c, r)
		} else {
			buttons[r] = fmt.Sprintf(`{"text": "%v", "callback_data": "%v"}`, reactionEmoji[r], r)
		}
	}
	reply_markup := fmt.Sprintf(`{"inline_keyboard": [[
		%v,
		%v,
		%v
	]]}`, buttons["reaction1"], buttons["reaction2"], buttons["reaction3"])
	return reply_markup
}

func SendSubstitutions(chatID int) {
	message, err := GetSubstitutions()
	if err != nil {
		SendMessage("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòê", chatID)
		return
	}

	reply_markup := makeReactionsKeyboard(map[string]int{
		"reaction1": 0,
		"reaction2": 0,
		"reaction3": 0,
	})

	p := url.Values{
		"chat_id":      {fmt.Sprintf("%v", chatID)},
		"text":         {message},
		"parse_mode":   {"Markdown"},
		"reply_markup": {reply_markup},
	}
	MakeTgapiRequest("sendMessage", p)
}

func HandleCallbackQuery(cq CallbackQuery) {
	isUpdateReactionCb, err := regexp.Match("reaction", []byte(cq.Data))
	isRequestSheduleCb, err := regexp.Match("group", []byte(cq.Data))

	if err != nil {
		return
	}
	if isUpdateReactionCb {
		updateMessageReaction(cq.From, cq.Message, cq.Data)
		answerReactionCallback(cq)
	} else if isRequestSheduleCb {
		RespondLessonsSheduleCallbackQuery(cq)
	}
}

func updateMessageReaction(from User, msg Message, reaction string) {
	userID, msgID, chatID := from.ID, msg.ID, msg.Chat.ID
	reactions, ok := messageReactions[msgID]
	if ok {
		reactions[userID] = reaction
		messageReactions[msgID] = reactions
	} else {
		messageReactions[msgID] = Reactions{userID: reaction}
	}
	reactions = messageReactions[msgID]
	counter := map[string]int{
		"reaction1": 0,
		"reaction2": 0,
		"reaction3": 0,
	}
	for _, reaction := range reactions {
		counter[reaction] = counter[reaction] + 1
	}
	log.Println("Updating reaction")
	reply_markup := makeReactionsKeyboard(counter)
	p := url.Values{
		"chat_id":      {fmt.Sprintf("%v", chatID)},
		"message_id":   {fmt.Sprintf("%v", msgID)},
		"reply_markup": {reply_markup},
	}
	MakeTgapiRequest("editMessageReplyMarkup", p)
}

func answerReactionCallback(cq CallbackQuery) {
	p := url.Values{
		"callback_query_id": {cq.ID},
		"text":              {fmt.Sprintf("You %v this.", reactionEmoji[cq.Data])},
	}
	MakeTgapiRequest("answerCallbackQuery", p)
}

func handleLessonsSheduleRequest(msg Message) {
	message := "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É üßê"

	replyMarkup := `{"inline_keyboard": [[
		{"text": "–ï–Ü-81", "callback_data": "group_ei81"},
		{"text": "–ü-81", "callback_data": "group_p81"}
	]]}`

	p := url.Values{
		"chat_id":      {fmt.Sprintf("%v", msg.Chat.ID)},
		"text":         {message},
		"parse_mode":   {"Markdown"},
		"reply_markup": {replyMarkup},
	}
	MakeTgapiRequest("sendMessage", p)
}

func sayThankYou(msg Message) {
	text := fmt.Sprintf("–°–ø–∞—Å–∏–±–æ %v, —Ç—ã —Ç–æ–∂–µ –Ω–∏—á–µ–≥–æ ü§ó", msg.From.FirstName)
	SendMessage(text, msg.Chat.ID)
}

func sayPlease(msg Message) {
	SendMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ üòâ", msg.Chat.ID)
}

func sayNoSleep(msg Message) {
	SendMessage("–Ø –Ω–µ —Å–ø–ª—é, —è –¥—É–º–∞—é ü§î", msg.Chat.ID)
}

func watchUpdates(msg Message) {
	SendMessage("–•–æ—Ä–æ—à–æ üòä", msg.Chat.ID)
}

func sayChatID(msg Message) {
	chatID := msg.Chat.ID
	messageText := fmt.Sprintf("–í–æ—Ç, –¥–µ—Ä–∂–∏ %v üôÉ", chatID)
	SendMessage(messageText, chatID)
}

func sayWasOffensively(msg Message) {
	SendMessage(fmt.Sprintf("–ê –≤–æ—Ç —Å–µ–π—á–∞—Å –æ–±–∏–¥–Ω–æ –±—ã–ª–æ üò•"), msg.Chat.ID)
}

func sayThinking(msg Message) {
	SendMessage("–î—É–º–∞–µ–º ü§î", msg.Chat.ID)
}

func sayGoodNight(msg Message) {
	SendMessage("–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ üòö", msg.Chat.ID)
}

func saySleeping(msg Message) {
	SendMessage("–°–ø–∏–º üò¥", msg.Chat.ID)
}

func sendChatInfo(msg Message) {
	chatID := msg.Chat.ID
	m := fmt.Sprintf("ü§ñ ID —á–∞—Ç–∞: %v", chatID)
	SendMessage(m, chatID)
}

func replyToThanks(msg Message) {
	isBot := msg.From.IsBot
	chatID := msg.Chat.ID
	log.Println(isBot)
	if !isBot {
		SendMessage("–°–ø–∞—Å–∏–±–æ–º –¥–∞–∂–µ –∂–æ–ø—É –Ω–µ –≤—ã—Ç—Ä–µ—à—å üò†", chatID)
	}
}
